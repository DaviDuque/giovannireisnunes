#!/usr/bin/perl
#
#  Ped 1.0
#  It is a example of how to get a lot of XML files generated by
#  Fitness++ (from Apple's iPod Nano 6th gen) process them and display
#  a fancy output -- https://giovannireisnunes.wordpress.com/?p=177
#
#  Copyright 2015, Giovanni Nunes <giovanni.nunes@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
use strict;
use XML::Simple;

use constant PROGRAM => 'Ped';
use constant UPDATE => 'atualizar';
use constant SHOW => 'exibir';
use constant STEPS => 'passadas';
use constant HTML => 'html';

use constant SUMMARY => 'ped.xml';
use constant T_TEXT => 'ped.ptxt';
use constant T_HTML => 'ped.phtml';

my $xml=new XML::Simple;

my $ped={};

my ( $i, $j, $k );
my ( $workouts, $farthest, $rundistance, $time, $calories, $walking, $running, $mysteps );
my ( $xmlfile, $fh, $fs, $data, $output, $content );

if ( -f SUMMARY )
{
	$ped=$xml->XMLin(SUMMARY);
	$mysteps=$ped->{Summary}{MyStep};
	$j=1;
}
else
{
	$j=0;
}

my $Command=$ARGV[0];
my $Parameter=$ARGV[1];

if ( $Command eq UPDATE or $Command eq STEPS )
{
	foreach $xmlfile (`ls data/[0-9]*.xml`)
	{
		$fh = IO::File->new($xmlfile);
		$data=$xml->XMLin($fh);
		
		if ( $Command eq UPDATE )
		{
			$workouts++;
			
			$i=$data->{runSummary}{distance}{content};
			$j=$data->{runSummary}{stepCounts}{walkEnd}-$data->{runSummary}{stepCounts}{walkBegin};
			$k=$data->{runSummary}{stepCounts}{runEnd}-$data->{runSummary}{stepCounts}{runBegin};
			$i=($j+$k)*($mysteps/1000) if ( $i==undef );
			$farthest=$i if ( $i>$farthest );
			$rundistance+=$i;
			$time+=$data->{runSummary}{duration};
			$calories+=$data->{runSummary}{calories};
			$walking+=$j;
			$running+=$k;
		}
		else
		{
			$i=$data->{runSummary}{distance}{content};
			if ( $i>0 )
			{
				$j++;
				$k+=$i/($data->{runSummary}{stepCounts}{walkEnd}-$data->{runSummary}{stepCounts}{walkBegin})+($data->{runSummary}{stepCounts}{runEnd}-$data->{runSummary}{stepCounts}{runBegin});
			}
		}
	}
	if ( $Command eq UPDATE )
	{
		$ped->{Summary}={ Workouts => $workouts,
						  Farthest => $farthest,
						  RunDistance => $rundistance,
						  Time => $time/1000,
						  Calories => $calories,
						  Walking => $walking,
						  Running => $running,
						  TotalSteps => ($walking+$running),
						  MyStep => $mysteps };
		  
		print "Histórico atualizado, totalizando $workouts exercício(s)\n";
	}
	else
	{
		$mysteps=sprintf('%.5f',1000*($k/$j));
		$ped->{Summary}{MyStep}=$mysteps;
		
		print "Utilizado(s) $j registro(s) para o cálculo.\nUm passo equivale a $mysteps metro(s).\n";
	}
	
	open($fh,'>'.SUMMARY);
	print $fh $xml->XMLout($ped);
	close($fh);
}
elsif( $Command eq SHOW )
{
	if ( $j>0 )
	{
		$i=$ped->{Summary}{Time};
		
		my $hours=int($i/3600);
		my $minutes=int($i/60)-$hours*60;
		my $seconds=$i-$minutes*60-$hours*3600;
		
		if ( $Parameter eq HTML )
		{
			$output=T_HTML;
		}
		else
		{
			$output=T_TEXT;
		}
		
		open($fh,'<',$output );
		$fs=-s $output;
			read $fh,$content,$fs;
		close($fh);
		
		$content=~s/%_WORKOUTS_%/$ped->{Summary}{Workouts}/;
		
		$i=sprintf('%.2f',$ped->{Summary}{Farthest});
		$content=~s/%_FARTHEST_%/$i/;
		
		$i=sprintf('%.2f',$ped->{Summary}{RunDistance});
		$content=~s/%_RUNDISTANCE_%/$i/;
		
		$content=~s/%_TOTALHOU_%/$hours/;
		$content=~s/%_TOTALMIN_%/$minutes/;
		
		$i=sprintf('%.2f',$seconds);
		$content=~s/%_TOTALSEC_%/$i/;
		
		$content=~s/%_CALORIES_%/$ped->{Summary}{Calories}/;
		$content=~s/%_TOTALSTEPS_%/$ped->{Summary}{TotalSteps}/;
		$content=~s/%_WALKING_%/$ped->{Summary}{Walking}/;
		$content=~s/%_RUNNING_%/$ped->{Summary}{Running}/;
		$content=~s/%_MYSTEPS_%/$ped->{Summary}{MyStep}/;
		
		print $content;
	}
	else
	{
		print "Sem histórico registrado, utilize '".UPDATE."' primeiro.\n";
	}
}
else
{
	print PROGRAM." - sumariza os arquivos XML produzidos pelo programa Fitness++ ".
		"dos iPod Nano 6th generation.\n".
		"Utilize:\n  ".
		UPDATE." - atualiza o histórico de exercícios.\n  ".
		SHOW." - exibe o histórico de exercícios\n  ".
		SHOW." ".HTML." - para o histórico em HTML.\n  ".
		STEPS." - para calcular a passada média.\n"
}

exit 0;
